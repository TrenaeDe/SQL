-- This project utilizes the following Superstore data;

CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);


/* 1. Write your own SQL query that uses a SELECT statement to order the items by 
price. */
SELECT *
FROM superstore
ORDER BY price desc;
-- Identifying all store items information by their price from greatest to least.

/* 2. Write your own SQL query that will show a statistic about the item prices, 
like a sum, average, minimum, maximum, or count. */
SELECT item_name, MIN(price) as cheapest_price
FROM superstore;
-- Identifying the cheapest item within the superstore database.

/* 3. Write your own SQL query that will show a statistic about the price for items 
in the category of "Kitchen Supplies". */
SELECT item_name, stock_quantity, MAX(price) as expensive_price
FROM superstore
WHERE category LIKE 'Kitchen Supplies';
-- Querying the most expensive item of the 'Kitchen Supplies' category.

/* 4. Identify store items with a low stock_quantity of 35 or lower. */
SELECT item_name, category, price, stock_quantity
FROM superstore
WHERE stock_quantity <= 35
ORDER BY stock_quantity desc;

/* 5. Identify how many store items are in each category. */
SELECT category, COUNT(item_name) as item_count
FROM superstore
GROUP BY category;

/* 6. Write out a SQL query of each category/s average average_rating from 
greatest to least. */
SELECT category, AVG(average_rating) as average_overall_rating
FROM superstore
GROUP BY category
ORDER BY average_overall_rating;
-- Identifying each category's overall average 'average_rating' from greatest to least.
